class Solution {
public:
    // Function to find the shortest distance between all pairs of nodes
    void shortest_distance(vector<vector<int>>& matrix){
        int n = matrix.size(); // Get the size of the matrix
        
        // Initialize the matrix
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                // If the cell value is -1, replace it with infinity (1e9)
                if(matrix[i][j] == -1){
                    matrix[i][j] = 1e9;
                }
                // Set the diagonal elements to 0
                if(i == j) 
                    matrix[i][j] = 0;
            }
        }
        
        // Main algorithm to find shortest distances
        for(int k = 0; k < n; k++){
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    // Update the shortest distance between i and j through k
                    matrix[i][j] = min(matrix[i][j] , matrix[i][k] + matrix[k][j]);
                }
            }
        }
        
        // Convert back the infinity (1e9) to -1 in the matrix
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == 1e9){
                    matrix[i][j] = -1;
                }
            }
        }
    }
};
