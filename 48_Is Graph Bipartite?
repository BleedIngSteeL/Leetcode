class Solution {
private:
    bool dfs(int node,int parent,vector<vector<int>>& graph, vector<int>&color){
        if(parent==-1 || color[parent]==1){
            color[node]=2;
        }
        else{
            color[node]=1;
        }
        for(auto it: graph[node]){
            if(color[it]==-1){
                if(dfs(it,node,graph,color)==false) return false;
            }
            else if(color[node]==color[it]) return false;
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>color(n,-1);
        for(int i=0;i<n;i++){
            if(color[i]==-1 && dfs(i,-1,graph,color)==false){
                return false;
            }
        }
        return true;
    }
};
