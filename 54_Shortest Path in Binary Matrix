class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1) return -1;

        queue<pair<int,pair<int,int>>> q;
        int n=grid.size();
        int m=grid[0].size();
        if(n==1 && m==1 && grid[0][0]==0) return 1;
        vector<vector<int>> dist(n,vector<int> (m,1e9));
        dist[0][0]=0;
        q.push({0,{0,0}});

        int delrow[]={-1,-1,0,1,1,1,0,-1};
        int delcol[]={0,1,1,1,0,-1,-1,-1};
        
        while(!q.empty()){
            auto it=q.front();
            q.pop();
            int dis=it.first;
            int r=it.second.first;
            int c=it.second.second;
            
            for(int i=0;i<8;i++){
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0 && dis+1 < dist[nrow][ncol]){
                    dist[nrow][ncol]=dis+1;
                    if(nrow==n-1 && ncol == m-1){
                        return dis+2;
                    }
                    else{
                        q.push({dis+1,{nrow,ncol}});
                    }
                }
            }
        }
        return -1;
    }
};
