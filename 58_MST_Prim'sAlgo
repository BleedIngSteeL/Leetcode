class Solution
{
	public:
	// Function to find the sum of weights of edges of the Minimum Spanning Tree.
	// Using Prim's Algorithm
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // Priority queue to store edges sorted by weight
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        
        // Array to mark visited nodes
        vector<int> vis(V,0);
        
        // Adding the starting node (node 0) with weight 0 to the priority queue
        pq.push({0,0});  // {weight, node}
        
        // Variable to store the sum of weights of MST
        int sum=0;
        
        // Main loop for Prim's Algorithm
        while(!pq.empty()){
            auto it=pq.top();
            int wt=it.first; // Weight of current edge
            int node=it.second; // Node of current edge
            pq.pop(); // Removing the processed edge from priority queue
            
            // If the node is already visited, skip it
            if(vis[node]==1) continue;
            
            // Mark the current node as visited
            vis[node]=1;
            
            // Add the weight of the current edge to the sum
            sum=sum+wt;
            
            // Iterate through adjacent nodes of the current node
            for(auto it: adj[node]){
                int adjNode=it[0]; // Adjacent node
                int edgeWeight=it[1]; // Weight of the edge
                
                // If the adjacent node is not visited, add the edge to the priority queue
                if(!vis[adjNode]){
                    pq.push({edgeWeight,adjNode});
                }
            }
        }
        
        // Return the sum of weights of MST
        return sum;
    }
};
