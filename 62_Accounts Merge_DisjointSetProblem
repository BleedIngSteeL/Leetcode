// basic disjoint set class template hai  ye 
class DisjointSet{
    vector<int> rank,parent,size;
public:
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }

    // path compression
    int findUPar(int node){
        // base case
        if(node==parent[node]){
            return node;
        }
        // recursive call
        return parent[node]=findUPar(parent[node]);
    }

        // ulp means ultimate parent 
    void unionByRank(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);
        if(ulp_u==ulp_v) return;

        // chota wala bade wale ke neeche lag jaega 
        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u]=ulp_v;
        }
        else if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v]=ulp_u;
        }
        else{     // case of boths rank same 
            parent[ulp_v]=ulp_u;    // or u can write reverse of it as well
            rank[ulp_u]++;
        }
    }


    void unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);
        if(ulp_u==ulp_v) return;

        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{      // isme equal wala case nhi likhenge kyuki uss case me v add krte hi the kisi ko kisi me 
            parent[ulp_v]=ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

// yha se code start ho rha hehehe
// thoda tough hai par ab kya hi krr skte hai 
// sochna mushkil hai baaki steps theek thaak hai 

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n=accounts.size();
        DisjointSet ds(n);
        unordered_map<string,int> mapMailNode;

        // connecting nodes, making disjoint set, making the ultimate parent
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                string mail=accounts[i][j];
                if(mapMailNode.find(mail) == mapMailNode.end()){
                    mapMailNode[mail]=i;
                }
                else{
                    ds.unionBySize(i,mapMailNode[mail]);
                }
            }
        }

        // merging the mails according to their disjoint set 
        vector<string> mergedMail[n];
        for(auto it: mapMailNode){
            string mail=it.first;
            int node=ds.findUPar(it.second);
            mergedMail[node].push_back(mail);
        }

        // rearranging the merged with thrir respective names as the list of lists
        vector<vector<string>> ans;
        for(int i=0;i<n;i++){
            if(mergedMail[i].size()==0) continue;
            sort(mergedMail[i].begin(),mergedMail[i].end());
            vector<string> temp;
            temp.push_back(accounts[i][0]); // names are at 0th index
            for(auto it: mergedMail[i]){
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
